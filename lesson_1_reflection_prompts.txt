How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Fill in your answer here

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

   It could help to see how the work has evolved and to be able to go back when you make a mistake or no longer desired change.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros: By committing manually, each commit is meaningful and useful. It makes it easier to go back and see what was done.
	Cons: If you forget to commit, changes you made could be lost or clumped in with another commit.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Allowing for multiple files in one commit connects files that are dependent on one another. The commit should reflect
	the entire project rather than just an individual file change.

How can you use the commands git log and git diff to view the history of files?

    git log displays all of the commits which you can then select to use with git diff to compare additions and subtractions to the files.

How might using version control make you more confident to make changes that
could break something?

    If you break something, you can just revert back to older commits that were working and start fresh.

Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here

What happens when you initialize a repository? Why do you need to do it?

It creates the .git folder. This will allow the repository to now track commits and changes within the files.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

How can you use the staging area to make sure you have one commit per logical
change?

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?